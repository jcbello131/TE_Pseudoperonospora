
### getting the vcf file into R.. cleaning the data from missing varinats and poorly genotyope samples

library("poppr")
library("vcfR")
library("ape")
library("pegas")
library("ggplot2")
library("adegenet")
library("seqinr")

Unix_VCF<-read.vcfR("~/Desktop/populations_169_EG_70.vcf", limit = 1e+07, nrows = -1, skip = 0, cols = NULL,
                    convertNA = TRUE, verbose = TRUE)

#recoding the missing information so poppr can recongnize de missing information
vcf<-Unix_VCF
vcf
dp <- extract.gt(vcf, element = "DP", as.numeric=TRUE)
quants <- apply(dp, MARGIN=2, quantile, probs=c(0.1, 0.8), na.rm=TRUE)
quants[,1:6]
dp2 <- sweep(dp, MARGIN=2, FUN = "-", quants[1,])
dp[dp2 < 0] <- NA
dp2 <- sweep(dp, MARGIN=2, FUN = "-", quants[2,])
dp[dp2 > 0] <- NA
dp[dp < 4] <- NA
vcf@gt[,-1][ is.na(dp) == TRUE ] <- NA

#omitting data 
dp <- extract.gt(vcf, element = "DP", as.numeric=TRUE)
#heatmap.bp(dp, rlabels = FALSE)

#omitting data samples
myMiss <- apply(dp, MARGIN = 2, function(x){ sum( is.na(x) ) } )
myMiss <- myMiss / nrow(dp)
#barplot(myMiss, las = 3)
##remove samples who missing information is above 40 %
vcf@gt <- vcf@gt[, c(TRUE, myMiss < 0.4)]
dp <- extract.gt(vcf, element = "DP", as.numeric=TRUE)
myMiss <- apply(dp, MARGIN = 2, function(x){ sum( is.na(x) ) } )
myMiss <- myMiss / nrow(dp)
#barplot(myMiss, las = 3)
vcf
dp <- extract.gt(vcf, element = "DP", as.numeric=TRUE)
#heatmap.bp(dp, rlabels = FALSE)


#omitting data variants 
myMiss <- apply(dp, MARGIN = 1, function(x){ sum( is.na(x) ) } )
myMiss <- myMiss / ncol(dp)
vcf <- vcf[myMiss < 0.2 ]
#vcf <- vcf[myMiss < 0.08]
vcf
dp <- extract.gt(vcf, element = "DP", as.numeric=TRUE)
#heatmap.bp(dp, rlabels = FALSE)
dp <- extract.gt(vcf, element = "DP", as.numeric=TRUE)
myMiss <- apply(dp, MARGIN = 2, function(x){ sum( is.na(x) ) } )
myMiss <- myMiss / nrow(dp)
#barplot(myMiss, las = 3)
vcf

####### Always execute code from a line with 7# (Pound)
####### treating your data as illumina data for pop genetics

gl.rubi<-vcfR2genlight(vcf)
gl.rubi
ploidy(gl.rubi)<-2
s<-read.table("~/Desktop/Strata_128B.txt", sep = "\t", stringsAsFactors = F, header = F)
strata(gl.rubi)<-s
splitStrata(gl.rubi) <- ~State/County/Year/Host/Year2/region/clade/rep
#gac <- genotype_curve(z, sample = 100, quiet = TRUE)
setPop(gl.rubi) <- ~Host
# Data for Table 2
pop(gl.rubi)

### Generating genetic distance (UPGMA) tree 
### for technical replicates (Figure 3)

setPop(gl.rubi) <- ~rep
pop(gl.rubi)
Pram_sub <- popsub(gl.rubi, blacklist = c("noRep"))
gl.rubi<-Pram_sub

library(RColorBrewer)
tree <- aboot(gl.rubi, tree = "upgma", distance = bitwise.dist, sample = 100, showtree = F, cutoff = 70, quiet = T)
cols <- brewer.pal(n = nPop(gl.rubi), name = "Set1")
plot.phylo(tree,edge.width = 1, cex = 0.5, font = 100, adj = 0, tip.color =  cols[pop(gl.rubi)])
nodelabels(tree$node.label, adj = c(1.3, -0.5), frame = "n", cex = 0.5,font = 5, xpd = TRUE)
axis(side = 1)
title(xlab = "Genetic distance (proportion of loci that are different (2978 SNPs))")
bitwise.dist(gl.rubi)

####### generating genetic distance (UPGMA) tree (Figure 4)

gl.rubi<-vcfR2genlight(vcf)
gl.rubi
ploidy(gl.rubi)<-2
s<-read.table("~/Desktop/Strata_128B.txt", sep = "\t", stringsAsFactors = F, header = F)
strata(gl.rubi)<-s
splitStrata(gl.rubi) <- ~State/County/Year/Host/Year2/region/clade/rep
#gac <- genotype_curve(z, sample = 100, quiet = TRUE)
setPop(gl.rubi) <- ~Host
# Data for Table 2
pop(gl.rubi)

library(RColorBrewer)
tree <- aboot(gl.rubi, tree = "upgma", distance = bitwise.dist, sample = 100, showtree = F, cutoff = 70, quiet = T)
cols <- brewer.pal(n = nPop(gl.rubi), name = "Set1")
plot.phylo(tree,edge.width = 1, cex = 0.5, font = 100, adj = 0, tip.color =  cols[pop(gl.rubi)])
nodelabels(tree$node.label, adj = c(1.3, -0.5), frame = "n", cex = 0.5,font = 5, xpd = TRUE)
legend('topleft', legend = c("Cucurbita.spp","C.sativus","H.lupulus", "C.lanatus", "C. maxima", "C. melo"), fill = cols, border = FALSE, bty = "n", cex = 1)
legend(35,10,c("CA","OR","WA"),cols, border = FALSE, bty = "n")
axis(side = 1)
title(xlab = "Genetic distance (proportion of loci that are different (2978 SNPs))")

####### treating your illumina sequencing data as regular pop gen data

y<-vcfR2genind(vcf, sep = "[|/]")
yz<-as.genclone(y)
s<-read.table("~/Desktop/Strata_128B.txt", sep = "\t", stringsAsFactors = F, header = F)
strata(yz)<-s
splitStrata(yz) <- ~State/County/Year/Host/Year2/region/clade/rep
#gac <- genotype_curve(z, sample = 100, quiet = TRUE)

### Calculating total number of samples per clade (Table 2)

setPop(yz) <- ~clade
ploidy(yz)<-2
r<-genclone2genind(yz)
library("adegenet")
library("hierfstat")
pop(r)
poppr(r)

### Generating PCA by hots/clade (Figure 5A)

setPop(gl.rubi) <- ~Host
pop(gl.rubi)
rubi.pca <- glPca(gl.rubi, nf = 3)
barplot(rubi.pca$eig, col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Proportion of variance explained")
title(xlab="Eigenvalue")
rubi.pca.scores <- as.data.frame(rubi.pca$scores)
rubi.pca.scores$pop <- pop(gl.rubi)
indNames(gl.rubi)
setPop(gl.rubi) <- ~State

### drawing the plot 

library(ggplot2)
set.seed(9)
p <- ggplot(rubi.pca.scores, aes(x=PC1, y=PC2, colour=pop)) 
p <- p + geom_point(size=2)
p <- p + stat_ellipse(level = 0.95, size = 0.5)
p <- p + geom_hline(yintercept = 0) 
p <- p + geom_vline(xintercept = 0) 
p <- p + theme_bw()
#p <- p + geom_text(label=indNames(gl.rubi), size = 2, color="black")
#p<- p+ geom_text_repel(aes(label = indNames(gl.rubi)), color="black", segment.color="blue", size=1.5) 
p<- p+ geom_text_repel(aes(label = pop(gl.rubi)), color="black", segment.color="blue", size=1) 
p


####### Clone correction

z<-as.genclone(y)
s<-read.table("~/Desktop/Strata_128B.txt", sep = "\t", stringsAsFactors = F, header = F)
strata(z)<-s
splitStrata(z) <- ~State/County/Year/Host/Year2/region/clade/rep
setPop(z) <- ~Host
mlg.table(z)
z2<-z
mlg.filter(z2, distance = bitwise.dist, algorithm = "f") <- 0.02
mlg.table(z2)
nmll(z2, "original")
nmll(z2, "contracted")
setPop(z2) <- ~clade

# Date for (Table 5)
poppr(z2)

####### Pairwise FST comparisons among Pseudoperonospora cubensis 
####### (clade I and II) and Pseudoperonospora humuli (Table 3)

r<-genclone2genind(yz)
library("adegenet")
library("hierfstat")
pop(r)
Mydata2 <- genind2hierfstat(r) 
basic.stats(r) # Fst following Nei (1987) on genind object
wc(r) # Weir and Cockerham's estimate
# Data for (Table 3)
genet.dist(r, method = "WC84")
# Data for (Table 4)
amova.cc.result <- poppr.amova(r, ~Host/region, clonecorrect = TRUE, cutoff = 0.1, within = FALSE)
amova.cc.result
Hyp.drain.amova.test = randtest(amova.cc.result)
str(Hyp.drain.amova.test)
plot(Hyp.drain.amova.test)
Hyp.drain.amova.test


####### PCA among cucumber samples (P. cubensis clade II) 
####### PCA (Figure 5B)

gl.rubi<-vcfR2genlight(vcf)
gl.rubi
ploidy(gl.rubi)<-2
s<-read.table("~/Desktop/Strata_128B.txt", sep = "\t", stringsAsFactors = F, header = F)
strata(gl.rubi)<-s
splitStrata(gl.rubi) <- ~State/County/Year/Host/Year2/region/clade/rep
setPop(gl.rubi) <- ~Host
pop(gl.rubi)
Pram_sub <- popsub(gl.rubi, blacklist = c("C. lanatus", "C. maxima", "C. melo", "H.lupulus", "C. moschata"))
gl.rubi<-Pram_sub
setPop(gl.rubi) <- ~region

rubi.pca <- glPca(gl.rubi, nf = 3)
barplot(rubi.pca$eig, col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Proportion of variance explained")
title(xlab="Eigenvalue")

rubi.pca.scores <- as.data.frame(rubi.pca$scores)
rubi.pca.scores$pop <- pop(gl.rubi)

indNames(gl.rubi)

library(ggrepel)
library(ggplot2)
set.seed(9)
p <- ggplot(rubi.pca.scores, aes(x=PC1, y=PC3, colour=pop)) 
p <- p + geom_point(size=3)
p <- p + stat_ellipse(level = 0.8, size = 1)
p <- p + geom_hline(yintercept = 0) 
p <- p + geom_vline(xintercept = 0) 
p <- p + theme_bw()
#p <- p + geom_text(label=indNames(gl.rubi), size = 2, color="black")
setPop(gl.rubi) <- ~County
p<- p+ geom_text_repel(aes(label = indNames(gl.rubi)), color="black", segment.color="blue", size=2.5) 
p

####### Pairwise FST comparisons among Pseudoperonospora cubensis clade II 
####### isolates from diferent regions

r<-genclone2genind(yz)
library("adegenet")
library("hierfstat")
pop(r)
Mydata2 <- genind2hierfstat(r) 
setPop(r) <- ~Host
Pram_sub <- popsub(r, blacklist = c("H.lupulus", "C. moschata", "C. lanatus", "C. maxima"))
gl.rubi4<-Pram_sub
pop(gl.rubi4)
setPop(gl.rubi4) <- ~State
Pram_sub <- popsub(gl.rubi4, blacklist = c("Florida ", "Ncarolina", "California", "Georgia"))
gl.rubi4<-Pram_sub
pop(gl.rubi4)
setPop(gl.rubi4) <- ~region
pop(gl.rubi4)

# Data for (Table 7)
genet.dist(gl.rubi4, method = "WC84")

# Data for (Table 6)
amova.cc.result <- poppr.amova(gl.rubi4, ~region/County, clonecorrect = TRUE, cutoff = 0.1, within = FALSE)
amova.cc.result
Hyp.drain.amova.test = randtest(amova.cc.result)
Hyp.drain.amova.test

# Clone correction for table 8

yz
setPop(yz) <- ~Host
pop(yz)
Pram_sub <- popsub(yz, blacklist = c("H.lupulus", "C. moschata", "C. lanatus", "C. maxima"))
gl.rubi4<-Pram_sub
pop(gl.rubi4)
setPop(gl.rubi4) <- ~State
Pram_sub <- popsub(gl.rubi4, blacklist = c("Florida ", "Ncarolina", "California", "Georgia"))
gl.rubi4<-Pram_sub
pop(gl.rubi4)
setPop(gl.rubi4) <- ~region
pop(gl.rubi4)
mlg.filter(gl.rubi4, distance = bitwise.dist, algorithm = "f") <- 0.02
mlg.table(gl.rubi4)
nmll(gl.rubi4, "original")
nmll(gl.rubi4, "contracted")
poppr(gl.rubi4)

####### PCA among hop samples (P. humuli) 
####### PCA (Figure 5C)

gl.rubi<-vcfR2genlight(vcf)
gl.rubi
ploidy(gl.rubi)<-2
s<-read.table("~/Desktop/Strata_128B.txt", sep = "\t", stringsAsFactors = F, header = F)
strata(gl.rubi)<-s
splitStrata(gl.rubi) <- ~State/County/Year/Host/Year2/region/clade/rep
setPop(gl.rubi) <- ~Host
Pram_sub <- popsub(gl.rubi, blacklist = c("C. lanatus", "C. maxima", "C.melo", "C. moschata", "C.sativus"))
gl.rubi<-Pram_sub
setPop(gl.rubi) <- ~region
pop(gl.rubi)

Pram_sub <- popsub(gl.rubi, blacklist = c("Georgia", "New York", "MiWoMichigan","EastMichigan" ))
gl.rubi<-Pram_sub
setPop(gl.rubi) <- ~region
pop(gl.rubi)

rubi.pca <- glPca(gl.rubi, nf = 3)
barplot(rubi.pca$eig, col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Proportion of variance explained")
title(xlab="Eigenvalue")

rubi.pca.scores <- as.data.frame(rubi.pca$scores)
rubi.pca.scores$pop <- pop(gl.rubi)

library(ggplot2)
set.seed(9)
p1 <- ggplot(rubi.pca.scores, aes(x=PC1, y=PC2, colour=pop)) 
p1 <- p1 + geom_point(size=3)
p1 <- p1 + stat_ellipse(level = 0.85, size = 1)
p1 <- p1 + geom_hline(yintercept = 0) 
p1 <- p1 + geom_vline(xintercept = 0) 
p1 <- p1 + theme_bw()
#p1 <- p1 + geom_text(label=indNames(gl.rubi), size = 2, color="black")
setPop(gl.rubi) <- ~region
p1<- p1+ geom_text_repel(aes(label = pop(gl.rubi)), color="black", segment.color="blue", size=3) 
p1

####### Pairwise FST comparisons among Pseudoperonospora humuli 
####### isolates from diferent regions

r<-genclone2genind(yz)
library("adegenet")
library("hierfstat")
pop(r)
Mydata2 <- genind2hierfstat(r) 
setPop(r) <- ~Host
Pram_sub <- popsub(r, blacklist = c("C.sativus", "C. moschata", "C. lanatus", "C. maxima", "C.melo"))
gl.rubi4<-Pram_sub
pop(gl.rubi4)
setPop(gl.rubi4) <- ~region
pop(gl.rubi4)
Pram_sub <- popsub(gl.rubi4, blacklist = c("CentralMichigan", "MiWoMichigan", "Oregon"))
gl.rubi4<-Pram_sub
pop(gl.rubi4)

basic.stats(gl.rubi4) # Fst following Nei (1987) on genind object
wc(gl.rubi4) 
genet.dist(gl.rubi4, method = "WC84")

#Data for table 9

amova.cc.result <- poppr.amova(r, ~region/County, clonecorrect = TRUE, cutoff = 0.1)
amova.cc.result
Hyp.drain.amova.test = randtest(amova.cc.result)
str(Hyp.drain.amova.test)
plot(Hyp.drain.amova.test)
Hyp.drain.amova.test

# Data for table 10

setPop(gl.rubi4) <- ~County
pop(gl.rubi4)
basic.stats(gl.rubi4) # Fst following Nei (1987) on genind object
wc(gl.rubi4) 
genet.dist(gl.rubi4, method = "WC84")


# Clone correction for table 11

yz
setPop(yz) <- ~Host
pop(yz)
Pram_sub <- popsub(yz, blacklist = c("C.sativus", "C. moschata", "C. lanatus", "C. maxima", "C.melo"))
gl.rubi4<-Pram_sub
pop(gl.rubi4)
setPop(gl.rubi4) <- ~State
Pram_sub <- popsub(gl.rubi4, blacklist = c("Florida ", "Ncarolina", "California", "Georgia"))
gl.rubi4<-Pram_sub
pop(gl.rubi4)
setPop(gl.rubi4) <- ~region
pop(gl.rubi4)
mlg.filter(gl.rubi4, distance = bitwise.dist, algorithm = "f") <- 0.02
mlg.table(gl.rubi4)
nmll(gl.rubi4, "original")
nmll(gl.rubi4, "contracted")
poppr(gl.rubi4)
